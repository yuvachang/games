{"version":3,"sources":["Menu/Menu.js","App/Routes.js","App/Home.js","Minesweeper/Timer.js","Minesweeper/Minesweeper.js","App/App.js","serviceWorker.js","index.js"],"names":["Menu","react_default","a","createElement","className","react_router_dom","to","Routes","react_router","render","path","component","Minesweeper","from","Home","Timer","state","start","seconds","minutes","timer","status","startTimer","_callee2","currentTimer","regenerator_default","wrap","_context2","prev","next","_this","timerInterval","abrupt","setInterval","Object","asyncToGenerator","mark","_callee","_context","Date","now","Math","floor","concat","String","padStart","toFixed","setState","stop","sent","clearInterval","pauseTimer","_callee3","_context3","clearTimer","this","_this$state","Component","size","mineCount","flagCount","board","mineLocations","started","ended","victory","holdLeft","holdRight","releaseTime","createBoard","selectedSize","_ref2","i","j","canvas","addEventListener","onMouseUp","onMouseDown","length","push","mine","flag","open","neighborMines","pos","highlighted","setMines","console","log","neighborPos","getNeighborCells","randomize","rowOrCol","random","mines","row","col","includes","setNeighborCounts","n","includeSelf","neighborCells","neighborFlags","k","p","ensureSafeFirstClick","forEach","cell","cascade","openNeighborCells","_this$getNeighborCell5","openCell","openAllMines","countOpenCells","opened","emptyCells","countFlags","setFlag","highlightNeighborCells","highlightTimeout","window","clearTimeout","elid","abs","document","getElementById","classList","remove","add","setTimeout","clearAllHighlights","mouseOver","e","clickedCellPos","JSON","parse","target","getAttribute","Number","removeEventListener","button","flagStatus","prevState","_callee4","_context4","clearBoard","startOver","_this2","_this$state2","ref","node","onClick","Minesweeper_Timer","onContextMenu","preventDefault","map","rowIdx","key","colIdx","id","cellpos","style","color","backgroundColor","App","Menu_Menu","Boolean","location","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5b50ee5.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\n\nfunction Menu() {\n  return (\n    <div className='menu'>\n      <Link to='/minesweeper'>\n        Minesweeper\n      </Link>\n    </div>\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport { Route, Switch, Redirect } from 'react-router-dom'\nimport { Home, Minesweeper } from '../components'\n\nexport default function Routes() {\n  return (\n    <Route\n      render={() => (\n        <Switch>\n          {/* <Route exact path='/' component={Home} /> */}\n          <Route path='/minesweeper' component={Minesweeper} />\n          <Redirect from='/' to='/minesweeper' component={() => null} />\n          <Redirect from='*' to='/' component={() => null} />\n        </Switch>\n      )}\n    />\n  )\n}\n","import React from 'react';\n\nfunction Home() {\n  return (\n    <div className=\"home\">\n     this is your home page\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { Component } from 'react'\n\nclass Timer extends Component {\n  state = {\n    start: 0,\n    seconds: 0,\n    minutes: 0,\n    timer: '00:00.0',\n    status: 'clear',\n  }\n\n  startTimer = async () => {\n    // prevent duplicate interval if timer already running\n    if (this.timerInterval && this.timerInterval !== 'cleared') {\n      return\n    }\n    const currentTimer = this.state.seconds + this.state.minutes * 60\n\n    this.timerInterval = await setInterval(async () => {\n      const start = this.state.start || Date.now()\n\n      let seconds = (Date.now() - start) / 1000 + currentTimer\n      const minutes = Math.floor(seconds / 60)\n      seconds = seconds - minutes * 60\n      const timer = `${String(minutes).padStart(2, '0')}:${seconds.toFixed(1).padStart(4, '0')}`\n\n      await this.setState({\n        start,\n        seconds,\n        minutes,\n        timer,\n      })\n    }, 100)\n  }\n\n  clearInterval = () => {\n    clearInterval(this.timerInterval)\n    this.timerInterval = 'cleared'\n  }\n\n  pauseTimer = async () => {\n    this.clearInterval()\n\n    this.setState({\n      start: 0,\n    })\n  }\n\n  clearTimer = () => {\n    this.clearInterval()\n    this.setState({\n      start: 0,\n      seconds: 0,\n      minutes: 0,\n      timer: '00:00.0',\n    })\n  }\n\n  componentWillUnmount() {\n    this.clearTimer()\n  }\n\n  render() {\n    const { start, timer } = this.state\n    return (\n      <div className='timer'>\n        <h3>Time: {timer}</h3>\n      </div>\n    )\n  }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport Timer from './Timer'\n\nclass Minesweeper extends Component {\n  state = {\n    size: [],\n    mineCount: 0,\n    flagCount: 0,\n    board: [],\n    mineLocations: [],\n    started: false, //mines set, board layout set\n    ended: false,\n    victory: false,\n\n    holdLeft: false,\n    holdRight: false,\n    releaseTime: 0,\n  }\n\n  createBoard = async selectedSize => {\n    // Add event listeners on board creation.\n    this.canvas.addEventListener('mouseup', this.onMouseUp)\n    this.canvas.addEventListener('mousedown', this.onMouseDown)\n\n    let [size, mineCount, board] = [this.state.size || 0, this.state.mineCount || 0, []]\n\n    // Determine board size/game difficulty selected.\n    if (!selectedSize && !this.state.size.length) return\n    if (selectedSize === 'small') {\n      size = [8, 8]\n      mineCount = 10\n    } else if (selectedSize === 'medium') {\n      size = [16, 16]\n      mineCount = 40\n    } else if (selectedSize === 'large') {\n      size = [24, 24]\n      mineCount = 99\n    }\n\n    // Initialize board arrays.\n    for (let i = 0; i < size[0]; i++) {\n      board[i] = []\n      for (let j = 0; j < size[1]; j++) {\n        // Set cell objects.\n        board[i].push({\n          mine: 0,\n          flag: 0,\n          open: 0,\n          neighborMines: 0,\n          pos: [i, j],\n          highlighted: 0,\n        })\n      }\n    }\n\n    // Set mines after board initialized.\n    this.setMines(size, mineCount, board)\n    // ??????? Not setting return value to 'board' but still works.\n\n    console.log('Board initialized =>', board)\n\n    await this.setState({\n      size,\n      mineCount,\n      board,\n    })\n  }\n\n  setMines = (size, mineCount, board, i, j) => {\n    // If i&j passed, ensure no mines in vicinity of given cell.\n    const neighborPos = (() => {\n      if (i && j) {\n        const { neighborPos: nbc } = this.getNeighborCells(i, j, 1, board)\n        return nbc\n      } else return 0\n    })()\n\n    // Function: generate random integer within 0-row/col.length range.\n    const randomize = rowOrCol => Math.floor(Math.random() * rowOrCol)\n\n    let mines = 0\n\n    while (mines < mineCount) {\n      // Get random row and column within xy range of board.\n      let row = randomize(size[0])\n      let col = randomize(size[1])\n\n      // Avoid setting mines on 9 cell block.\n      if (neighborPos) {\n        if (neighborPos.includes(`${row}${col}`)) continue\n      }\n\n      // Skip cell if mine already exists on cell.\n      if (board[row][col].mine === 1) continue\n\n      // Set mine.\n      board[row][col].mine = 1\n      mines++\n    }\n\n    // After setting mines, set neighborCounts of mines for each cell.\n    board = this.setNeighborCounts(board)\n\n    // // ## Uncomment to count total mines.\n    // let totalmines = 0\n    // board.forEach(row=> {\n    //   row.forEach(cell=>{\n    //     if (cell.mine){totalmines+=1}\n    //   })\n    // })\n    // console.log(totalmines)\n    // // ##\n\n    return board\n  }\n\n  setNeighborCounts = board => {\n    // Count mines in neighboring cells for each cell on board.\n    for (let i = 0, n = board.length; i < n; i++) {\n      for (let j = 0, n = board[i].length; j < n; j++) {\n        const { neighborMines } = this.getNeighborCells(i, j, 0, board)\n        board[i][j].neighborMines = neighborMines\n      }\n    }\n    return board\n  }\n\n  getNeighborCells = (i, j, includeSelf, board) => {\n    const neighborCells = []\n    const neighborPos = []\n    let neighborMines = 0\n    let neighborFlags = 0\n\n    // Return 8 or 9 cell block around center point i&j.\n    for (let k = -1; k <= 1; k++) {\n      for (let p = -1; p <= 1; p++) {\n        if (i + k >= 0 && i + k < board.length && j + p >= 0 && j + p < board[i].length) {\n          if (!includeSelf && (k === 0 && p === 0)) continue\n          neighborCells.push(board[i + k][j + p])\n          neighborPos.push(`${String(i + k).padStart(2, '0')}${String(j + p).padStart(2, '0')}`)\n          neighborMines += board[i + k][j + p].mine\n          if (board[i + k][j + p].flag % 3 === 1) {\n            neighborFlags++\n          }\n        }\n      }\n    }\n\n    return { neighborPos, neighborCells, neighborMines, neighborFlags }\n  }\n\n  ensureSafeFirstClick = (i, j, board) => {\n    const { neighborCells } = this.getNeighborCells(i, j, 1, board)\n    let mineCount = 0\n\n    // Count mines around clicked cell including the cell.\n    neighborCells.forEach(cell => {\n      if (board[cell.pos[0]][cell.pos[1]].mine) {\n        board[cell.pos[0]][cell.pos[1]].mine = 0\n\n        mineCount++\n      }\n    })\n\n    // Move mines from 9 cell block around clicked cell to rest of board.\n    return this.setMines(this.state.size, mineCount, board, i, j)\n  }\n\n  cascade = (i, j, board) => {\n    const { neighborCells } = this.getNeighborCells(i, j, 0, board)\n\n    neighborCells.forEach(cell => {\n      const row = cell.pos[0]\n      const col = cell.pos[1]\n\n      // Base case: cell has neighborMines && not already open.\n      if (!!board[row][col].neighborMines) {\n        if (!board[row][col].open) {\n          board[row][col].open = 1\n        }\n      } else if (!board[row][col].neighborMines) {\n        // Recurse if cell not open && has no neighborMines.\n        if (!board[row][col].open) {\n          board[row][col].open = 1\n          board = this.cascade(row, col, board)\n        }\n      }\n    })\n\n    return board\n  }\n\n  openNeighborCells = (i, j, board) => {\n    const cell = board[i][j]\n    const { neighborFlags, neighborCells } = this.getNeighborCells(i, j, 0, board)\n\n    if (neighborFlags === cell.neighborMines) {\n      neighborCells.forEach(cell => {\n        if (!cell.flag && !cell.open) {\n          this.openCell(cell.pos[0], cell.pos[1], board)\n        }\n      })\n    }\n  }\n\n  openAllMines = board => {\n    board.forEach(row => {\n      row.forEach(cell => {\n        if (cell.mine) {\n          board[cell.pos[0]][cell.pos[1]].open = 1\n        }\n      })\n    })\n  }\n\n  countOpenCells = board => {\n    let opened = 0\n    board.forEach(row => {\n      row.forEach(cell => {\n        if (cell.open) {\n          opened++\n        }\n      })\n    })\n    return opened\n  }\n\n  openCell = async (i, j, board) => {\n    if (this.state.ended || board[i][j].open) return\n\n    // If cell is first cell open, make sure first click is on empty cascading cell.\n    if (!this.state.started) {\n      board = this.ensureSafeFirstClick(i, j, board)\n    }\n\n    // If timer is paused or uninitialized, start timer.\n    if (!this.timer.state.start) {\n      this.timer.startTimer()\n    }\n\n    const cell = board[i][j]\n    // Open cell.\n    board[i][j].open = 1\n\n    // If opened cell has 0 mines and 0 neighborMines, cascade.\n    if (cell.neighborMines === 0 && !cell.mine) {\n      board = this.cascade(i, j, board)\n    }\n\n    // End game if a mine is opened.\n    let ended = this.state.ended\n    let victory = this.state.victory\n    if (cell.mine) {\n      ended = true\n      this.openAllMines(board)\n    }\n\n    // End and win game if all empty cells opened.\n    const emptyCells = this.state.size[0] * this.state.size[1] - this.state.mineCount\n    const openedCells = this.countOpenCells(board)\n    if (openedCells === emptyCells) {\n      ended = true\n      victory = true\n    }\n\n    // Stop timer if game ends.\n    if (ended) {\n      this.timer.pauseTimer()\n    }\n\n    await this.setState({\n      board,\n      ended,\n      victory,\n      started: true,\n    })\n  }\n\n  countFlags = board => {\n    let flagCount = 0\n    board.forEach(row => {\n      row.forEach(cell => {\n        if (cell.flag % 3 === 1) {\n          flagCount++\n        }\n      })\n    })\n    return flagCount\n  }\n\n  setFlag = (i, j, board) => {\n    if (!board[i][j].open && this.state.started) {\n      board[i][j].flag++\n\n      const flagCount = this.countFlags(board)\n\n      this.setState({ board, flagCount })\n    }\n  }\n\n  highlightNeighborCells = (i, j) => {\n    if (this.highlightTimeout) {\n      window.clearTimeout(this.highlightTimeout)\n    }\n\n    let highlighted = []\n\n    for (let k = -2; k <= 2; k++) {\n      for (let p = -2; p <= 2; p++) {\n        if (i + k >= 0 && i + k < this.state.board.length && j + p >= 0 && j + p < this.state.board[i].length) {\n          if (k === 0 && p === 0) continue\n          const elid = `${String(i + k).padStart(2, '0')}${String(j + p).padStart(2, '0')}`\n          if (Math.abs(p) === 2 || Math.abs(k) === 2) {\n            document.getElementById(elid).classList.remove('highlighted')\n          } else {\n            if (!this.state.board[i + k][j + p].flag % 3 > 0) {\n              document.getElementById(elid).classList.add('highlighted')\n              highlighted.push(elid)\n            }\n          }\n        }\n      }\n    }\n\n    this.highlightTimeout = window.setTimeout(() => {\n      this.clearAllHighlights(highlighted)\n    }, 5)\n  }\n\n  clearAllHighlights = highlighted => {\n    this.state.board.forEach(row => {\n      row.forEach(cell => {\n        const elid = `${String(cell.pos[0]).padStart(2, '0')}${String(cell.pos[1]).padStart(2, '0')}`\n        if (highlighted && !highlighted.includes(elid)) {\n          document.getElementById(elid).classList.remove('highlighted')\n        } else if (!highlighted) {\n          document.getElementById(elid).classList.remove('highlighted')\n        }\n      })\n    })\n  }\n\n  mouseOver = async e => {\n    let clickedCellPos = JSON.parse(e.target.getAttribute('cellpos'))\n    let i = Number(clickedCellPos[0])\n    let j = Number(clickedCellPos[1])\n\n    this.highlightNeighborCells(i, j)\n  }\n\n  onMouseUp = e => {\n    this.clearAllHighlights()\n    this.canvas.removeEventListener('mouseover', this.mouseOver)\n\n    // ## If mouse released outside of board, avoid board logic.\n    if (!e.target.className.includes('cell')) {\n      if (e.button === 0) {\n        // LMB up.\n        this.setState(prevState => {\n          if (prevState.holdLeft) {\n            return {\n              holdLeft: false,\n              releaseTime: Date.now(),\n            }\n          }\n        })\n      } else if (e.button === 2) {\n        this.setState({\n          holdRight: false,\n          releaseTime: Date.now(),\n        })\n      }\n      return\n    }\n    // ## If mouse released outside of board, avoid board logic.\n\n    const board = this.state.board\n    let clickedCellPos = JSON.parse(e.target.getAttribute('cellpos'))\n    let i = Number(clickedCellPos[0])\n    let j = Number(clickedCellPos[1])\n    const cell = board[i][j]\n\n    if (Date.now() - this.state.releaseTime < 50) {\n      // L+RMB up.\n\n      // Open neighborCells if:\n      // 1) Game has started.\n      // 2) Clicked cell is open already.\n      // 3) NeighborFlagCount===cell.neighborMines.\n      // 3a) Unopened neighbor count === cell.neighborMines.\n      if (cell.open) {\n        this.openNeighborCells(i, j, board)\n      }\n\n      this.setState({\n        holdLeft: false,\n        holdRight: false,\n      })\n    } else if (e.button === 0) {\n      // LMB up.\n\n      // Open cell if:\n      // 1) LMB up on cell,\n      // 2) Cell isn't already open,\n      // 3) RMB isn't pressed,\n      if (e.target.className.includes('cell')) {\n        let flagStatus = cell.flag % 3\n        if (!cell.open && !this.state.holdRight && flagStatus === 0) {\n          this.openCell(i, j, board)\n        }\n      }\n\n      this.setState({\n        holdLeft: false,\n        releaseTime: Date.now(),\n      })\n    } else if (e.button === 2) {\n      // RMB up.\n\n      // Increment cell.flag if:\n      // 1) RMB up on cell,\n      // 2) LMB isn't pressed,\n      if (!this.state.holdLeft) {\n        // Set flag on cell.\n        if (!this.timer.state.start) {\n          this.timer.startTimer()\n        }\n        this.setFlag(i, j, board)\n      }\n\n      // TODO:\n      //x## SET FLAGS\n      //x## PREVENT OPEN CELL IF HAS FLAG%3>0\n      //x## R+LMB OPEN NEIGHBORS IF FLAG NUMBERS MATCH NEIGHBORMINES\n      //x#### this.openNeighbors function, open all neighbors except flagged\n      //x###### if empty && !neighborMines, this.cascade()\n      //x## END GAME IF MINE IS OPENED\n      //x#### End game sequence, blow all mines.\n      //x## FLAG COUNTER VS TOTAL MINE COUNT\n      // ## WIN :: ALL EMPTY CELLS OPENED\n      // #### Condition: all empty cells opened regardless of flags.\n\n      this.setState({\n        // board,\n        holdRight: false,\n        releaseTime: Date.now(),\n      })\n    }\n  }\n\n  onMouseDown = async e => {\n    // trigger hover class for board\n    if (e.button === 0) {\n      // LEFT BUTTON DOWN\n      // left click: hover only individual cells\n      await this.setState({\n        holdLeft: true,\n      })\n    } else if (e.button === 2) {\n      // RIGHT BUTTON DOWN\n      await this.setState({\n        holdRight: true,\n      })\n    }\n\n    const { holdLeft, holdRight } = this.state\n    if (holdLeft && holdRight) {\n      // highlight surrounding cells\n      // trigger highlight function for this cell, mouseOver initiates for cells mouseOver'd after this cell\n      this.mouseOver(e)\n      this.canvas.addEventListener('mouseover', this.mouseOver)\n    }\n  }\n\n  clearBoard = () => {\n    console.log('Clearing board.')\n\n    this.canvas.removeEventListener('mouseup', this.onMouseUp)\n    this.canvas.removeEventListener('mousedown', this.onMouseDown)\n\n    this.setState({\n      size: [],\n      mineCount: 0,\n      board: [],\n      started: false,\n      ended: false,\n    })\n  }\n\n  startOver = () => {\n    this.createBoard()\n    this.timer.clearTimer()\n    this.setState({\n      started: false,\n      ended: false,\n      victory: false,\n    })\n  }\n\n  componentDidMount() {}\n\n  componentWillUnmount() {\n    this.canvas.removeEventListener('mouseup', this.onMouseUp)\n    this.canvas.removeEventListener('mousedown', this.onMouseDown)\n    // window.clearTimeout(this.LMBtimeout--)\n  }\n\n  render() {\n    const { size, mineCount, board, started, holdLeft } = this.state\n    return (\n      <div className='minesweeper-container' ref={node => (this.canvas = node)}>\n        <div className='minesweeper-canvas'>\n          {/* MENU BUTTONS */}\n          {!!size.length && (\n            <div className='minesweeper-menu'>\n              <button onClick={this.clearBoard}>Change Difficulty</button>\n              <h3>\n                Flags: {this.state.flagCount}\n                <br /> Mines: {this.state.mineCount}\n              </h3>\n              {this.state.victory && <h3>You won!</h3>}\n              {this.state.ended && !this.state.victory && <h3>You lost!</h3>}\n\n              {this.state.started && (\n                <button\n                  onClick={this.startOver}>\n                  Start Over\n                </button>\n              )}\n              {this.state.started && <button onClick={this.timer.pauseTimer}>Pause Timer</button>}\n              <Timer ref={node => (this.timer = node)} />\n            </div>\n          )}\n\n          {/* SELECT BOARD SIZE */}\n          {!size.length && (\n            <div className='select-board'>\n              <button onClick={() => this.createBoard('small')}>Easy (8x8)</button>\n              <button onClick={() => this.createBoard('medium')}>Medium (16x16)</button>\n              <button onClick={() => this.createBoard('large')}>Hard (30x30)</button>\n            </div>\n          )}\n\n          {/* BOARD SIZE SELECTED */}\n          {!!size.length && (\n            <div\n              className='board'\n              onContextMenu={e => {\n                e.preventDefault()\n                return false\n              }}>\n              {board.map((row, rowIdx) => {\n                return (\n                  <div className='board-row' key={rowIdx}>\n                    {row.map((cell, colIdx) => {\n                      return (\n                        <div\n                          className={`cell${cell.open ? ' open' : holdLeft ? ' hover' : ''}${cell.highlighted ? ' highlighted' : ''}`}\n                          id={`${String(rowIdx).padStart(2, '0')}${String(colIdx).padStart(2, '0')}`}\n                          cellpos={`[${rowIdx},${colIdx}]`}\n                          key={`${rowIdx},${colIdx}`}\n                          style={cell.mine && cell.open ? { color: 'red', backgroundColor: 'pink' } : null}>\n                          {/* {cell.neighborMines} */}\n                          {/* {cell.mine} */}\n                          {cell.open ? (cell.mine ? 'X' : `${cell.neighborMines}`) : cell.flag % 3 === 1 ? 'f' : cell.flag % 3 === 2 ? '?' : null}\n                        </div>\n                      )\n                    })}\n                  </div>\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Minesweeper\n","import React from 'react';\nimport { Menu, Routes } from '../components'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Menu />\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App/App'\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}